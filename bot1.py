import asyncio
import json
import os
import datetime
import contextlib
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

API_TOKEN = "8138182283:AAHSnvgi5j4ksM2--jr1b31SsVpI2qGF-YM"
ADMINS = [1295147526, 1235984904]

def is_admin(user_id):
    return user_id in ADMINS

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

FLOWERS_FILE = "flowers.json"
USERS_FILE = "users.json"
flowers = []
users = set()

def save_flowers():
    with open(FLOWERS_FILE, "w", encoding="utf-8") as f:
        json.dump(flowers, f, ensure_ascii=False, indent=2)

def load_flowers():
    global flowers
    if os.path.exists(FLOWERS_FILE):
        try:
            with open(FLOWERS_FILE, "r", encoding="utf-8") as f:
                flowers = json.load(f)
        except Exception:
            flowers = []
            save_flowers()
    else:
        flowers = []

def save_users():
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(list(users), f)

def load_users():
    global users
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, "r", encoding="utf-8") as f:
                users = set(json.load(f))
        except Exception:
            users = set()
            save_users()
    else:
        users = set()

load_flowers()
load_users()

carts = {}

CATEGORIES = ["–ë—É–∫–µ—Ç—ã"]
category_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=cat)] for cat in CATEGORIES],
    resize_keyboard=True,
    one_time_keyboard=True
)

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üå∏ –ö–∞—Ç–∞–ª–æ–≥"),
            KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å")
        ],
        [
            KeyboardButton(text="üì± –°–æ—Ü.—Å–µ—Ç–∏"),
            KeyboardButton(text="üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
        ]
    ],
    resize_keyboard=True
)

@dp.message(lambda m: m.text == "üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
async def contact_admin(msg: Message):
    await msg.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞–ø—Ä—è–º—É—é:\n"
        "WhatsApp:https://clck.ru/3Nh8rH\n"
        "–ò–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å: +79214070906"
    )

pickup_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞ üöö"), KeyboardButton(text="–°–∞–º–æ–≤—ã–≤–æ–∑ üè™")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

payment_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏"), KeyboardButton(text="–û–ø–ª–∞—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

DELIVERY_REGIONS = [
    "–≥. –¢–æ—Å–Ω–æ",
    "–¢–æ—Å–Ω–µ–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω",
    "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
    "–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
]
region_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=region)] for region in DELIVERY_REGIONS],
    resize_keyboard=True,
    one_time_keyboard=True
)

def with_back_kb(keyboard):
    kb = keyboard.keyboard.copy()
    kb.append([KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=True)

category_kb_with_back = with_back_kb(category_kb)
pickup_kb_with_back = with_back_kb(pickup_kb)
region_kb_with_back = with_back_kb(region_kb)
payment_kb_with_back = with_back_kb(payment_kb)

PRICE_RANGES = {
    "–ë—É–∫–µ—Ç—ã": [
        ("1000‚ÇΩ ‚Äî 3000‚ÇΩ", 1000, 3000),
        ("3000‚ÇΩ ‚Äî 6000‚ÇΩ", 3000, 6000),
        ("6000‚ÇΩ –∏ –≤—ã—à–µ", 6000, 999999)
    ],
}

class AddFlower(StatesGroup):
    waiting_for_photo = State()
    waiting_for_name = State()
    waiting_for_price = State()
    waiting_for_emoji = State()
    waiting_for_category = State()

class EditFlowerFSM(StatesGroup):
    waiting_for_action = State()
    waiting_for_new_name = State()
    waiting_for_new_price = State()
    waiting_for_new_emoji = State()
    waiting_for_new_category = State()

class OrderFSM(StatesGroup):
    choosing_delivery = State()
    choosing_region = State()
    entering_address = State()
    choosing_date = State()
    choosing_time = State()
    entering_phone = State()
    entering_name = State()
    asking_card = State()
    entering_card_text = State()
    choosing_payment = State()
    waiting_for_order_confirm = State()

class BroadcastFSM(StatesGroup):
    waiting_for_text = State()

async def send_disappearing_message(user_id, text, state, **kwargs):
    data = await state.get_data()
    last_id = data.get("last_bot_message_id")
    if last_id:
        with contextlib.suppress(Exception):
            await bot.delete_message(user_id, last_id)
    msg = await bot.send_message(user_id, text, **kwargs)
    await state.update_data(last_bot_message_id=msg.message_id)
    return msg

def get_quantity_kb(idx, quantity=1):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_{idx}_{quantity}"),
                InlineKeyboardButton(text=str(quantity), callback_data="noop"),
                InlineKeyboardButton(text="‚ûï", callback_data=f"increase_{idx}_{quantity}")
            ],
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"addcart_{idx}_{quantity}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_price_range")]
        ]
    )

def get_delivery_price(region, address, date, time):
    hour = int(time.split(":")[0]) if time else 12
    if region == "–≥. –¢–æ—Å–Ω–æ":
        if 22 <= hour or hour < 9:
            return 500
        return 250
    elif region == "–¢–æ—Å–Ω–µ–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω":
        return 400
    elif region == "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å":
        return 600
    elif region == "–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥":
        return 800
    return 0

@dp.message(Command("start"))
async def start(msg: Message):
    if msg.from_user.id not in users:
        users.add(msg.from_user.id)
        save_users()
    await msg.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Ü–≤–µ—Ç–æ–≤! –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å –∑–¥–µ—Å—å.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

@dp.message(lambda m: m.text == "üå∏ –ö–∞—Ç–∞–ª–æ–≥")
async def menu_catalog(msg: Message, state: FSMContext):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_kb_with_back)
    await state.set_state("waiting_for_catalog_category")

@dp.message(lambda m: m.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about(msg: Message):
    await msg.answer('- –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ —Ü–≤–µ—Ç–æ–≤ –ø–æ –≥. –¢–æ—Å–Ω–æ, –¢–æ—Å–Ω–µ–Ω—Å–∫–æ–º—É —Ä–∞–π–æ–Ω—É –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—É \n-–°–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —Å –ø–ª–∞–Ω—Ç–∞—Ü–∏—è–º–∏ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –∏ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è\n-–û—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞)\n-–ü–æ–ª–Ω–æ—Å—Ç—å—é –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n–û–ø–ª–∞—Ç–∞\n–ü–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –Ω—é–∞–Ω—Å–æ–≤ –∑–∞–∫–∞–∑–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É.  –ï—Å–ª–∏ –∑–∞–∫–∞–∑–∞–Ω —Ç–æ–≤–∞—Ä –∏–∑ –Ω–∞–ª–∏—á–∏—è —Å —ç–∫—Å–ø—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–æ–π, –æ–ø–ª–∞—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º.\n–î–æ—Å—Ç–∞–≤–∫–∞\n–î–û–°–¢–ê–í–ö–ê –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è 24 —á–∞—Å–∞! –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥. –¢–æ—Å–Ω–æ –æ—Ç 250‚ÇΩ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –¢–æ—Å–Ω–µ–Ω—Å–∫–æ–º—É —Ä–∞–π–æ–Ω—É, –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏, –≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—É —Å–æ–≥–ª–∞—Å–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞–º –Ø–Ω–¥–µ–∫—Å–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏.  –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –¢–æ—Å–Ω–æ - 30 –º–∏–Ω—É—Ç –ü–æ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ªÔøΩÔøΩ—Å—Ç–∏ –∏ –≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—É - 2-3 —á–∞—Å–∞ –≠–∫—Å–ø—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∞ (—Ç–æ–ª—å–∫–æ –ø–æ –≥. –¢–æ—Å–Ω–æ) - –¥–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –Ω–∞–ª–∏—á–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–∞ - –æ—Ç 250‚ÇΩ —Ä—É–±. –ù–æ—á–Ω–æ–π —Ç–∞—Ä–∏—Ñ (—Å 22-9:00) –ø–æ –¢–æ—Å–Ω–æ - –æ—Ç 500‚ÇΩ\n–í–æ–∑–≤—Ä–∞—Ç\n‚ùóÔ∏è–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¶–≤–µ—Ç—ã —è–≤–ª—è—é—Ç—Å—è –∂–∏–≤—ã–º —Ç–æ–≤–∞—Ä–æ–º.  –í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ó–∞–∫–æ–Ω–æ–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ ¬´–û –∑–∞—â–∏—Ç–µ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π¬ª –æ—Ç 07.02.1992 ‚Ññ 2300-1 –∏ –ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç 19.01.1998 ‚Ññ 55 —Å—Ä–µ–∑–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç—ã –∏ –≥–æ—Ä—à–µ—á–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –æ–±–º–µ–Ω—É –∏ –≤–æ–∑–≤—Ä–∞—Ç—É –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç (—É–∫–∞–∑–∞–Ω—ã –≤ –ü–µ—Ä–µ—á–Ω–µ –Ω–µ–ø—Ä–æ–¥–æ–≤–æ–ª—å—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–¥–ª–µ–∂–∞—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –Ω–µ –ø–æ–¥–ª–µ–∂–∞—â–∏—Ö –≤–æ–∑–≤—Ä–∞—Ç—É –∏–ª–∏ –æ–±–º–µ–Ω—É). –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä –Ω–µ–Ω–∞–¥–ª–µ–∂–∞—â–µ–≥–æ –∫–∞—á–µ—ÅÔøΩÔøΩ–≤–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø.3 —Å—Ç. 497 –ì–ö –†–§, —Å—Ç–∞—Ç—å—è 21 –ó–∞–∫–æ–Ω–∞ "–û –∑–∞—â–∏—Ç–µ –ø—Ä–∞–≤ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π").')

@dp.message(lambda m: m.text == "üì± –°–æ—Ü.—Å–µ—Ç–∏")
async def contacts(msg: Message):
    await msg.answer("–¢–µ–ª–µ—Ñ–æ–Ω: +79201860779\nVK: https://vk.com/bar_flower\nWhatsApp:https://clck.ru/3Nh8rH")

@dp.message(StateFilter("waiting_for_catalog_category"))
async def show_category(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
        await state.clear()
        return
    if msg.text not in CATEGORIES:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–Ω–æ–ø–∫–æ–π.")
        return
    await state.update_data(selected_category=msg.text)
    ranges = PRICE_RANGES[msg.text]
    price_range_kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=label)] for label, _, _ in ranges] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:", reply_markup=price_range_kb)
    await state.set_state("waiting_for_price_range")

@dp.message(StateFilter("waiting_for_price_range"))
async def show_price_range(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_kb_with_back)
        await state.set_state("waiting_for_catalog_category")
        return
    data = await state.get_data()
    category = data.get("selected_category")
    ranges = PRICE_RANGES[category]
    selected = None
    for label, min_price, max_price in ranges:
        if msg.text == label:
            selected = (min_price, max_price)
            break
    if not selected:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –∫–Ω–æ–ø–∫–æ–π.")
        return
    min_price, max_price = selected

    items = [
        (i, f) for i, f in enumerate(flowers)
        if f.get("category") == category and f.get("price") is not None
           and min_price <= int(f["price"]) <= max_price
    ]
    if not items:
        await msg.answer("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.", reply_markup=main_menu)
        await state.clear()
        return

    product_message_ids = []
    for idx, f in items:
        kb = get_quantity_kb(idx)
        sent = await msg.answer_photo(
            f["photo"],
            caption=f"{f['emoji']} {f['name']}\n–¶–µ–Ω–∞: {f['price']} —Ä—É–±.",
            reply_markup=kb
        )
        product_message_ids.append(sent.message_id)
    await state.update_data(product_message_ids=product_message_ids)
    await state.set_state("waiting_for_price_range_back")

@dp.message(StateFilter("waiting_for_price_range_back"))
async def price_range_back(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        category = data.get("selected_category")
        ranges = PRICE_RANGES[category]
        price_range_kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=label)] for label, _, _ in ranges] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:", reply_markup=price_range_kb)
        await state.set_state("waiting_for_price_range")
    else:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

@dp.callback_query(F.data == "back_to_price_range")
async def back_to_price_range(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category = data.get("selected_category")
    ranges = PRICE_RANGES[category]
    price_range_kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=label)] for label, _, _ in ranges] + [[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    product_message_ids = data.get("product_message_ids", [])
    for mid in product_message_ids:
        with contextlib.suppress(Exception):
            await bot.delete_message(callback.from_user.id, mid)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:", reply_markup=price_range_kb)
    await state.set_state("waiting_for_price_range")
    await callback.answer()

@dp.callback_query(F.data.startswith("increase_"))
async def increase_quantity(callback: CallbackQuery):
    _, idx, quantity = callback.data.split("_")
    idx = int(idx)
    quantity = int(quantity) + 1
    await callback.message.edit_reply_markup(reply_markup=get_quantity_kb(idx, quantity))
    await callback.answer()

@dp.callback_query(F.data.startswith("decrease_"))
async def decrease_quantity(callback: CallbackQuery):
    _, idx, quantity = callback.data.split("_")
    idx = int(idx)
    quantity = max(1, int(quantity) - 1)
    await callback.message.edit_reply_markup(reply_markup=get_quantity_kb(idx, quantity))
    await callback.answer()

@dp.callback_query(F.data.startswith("addcart_"))
async def add_to_cart(callback: CallbackQuery, state: FSMContext):
    _, idx, quantity = callback.data.split("_")
    idx = int(idx)
    quantity = int(quantity)
    user_id = callback.from_user.id
    carts.setdefault(user_id, [])
    for _ in range(quantity):
        carts[user_id].append(flowers[idx])
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_more")],
            [InlineKeyboardButton(text="üìã–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é", callback_data="checkout")]
        ]
    )
    await callback.message.answer(
        f"–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É. –í –∫–æ—Ä–∑–∏–Ω–µ {len(carts[user_id])} —Ç–æ–≤–∞—Ä–æ–≤.\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=kb
    )
    await callback.answer()

@dp.callback_query(F.data == "add_more")
async def add_more(callback: CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    data = await state.get_data()
    product_message_ids = data.get("product_message_ids", [])
    for mid in product_message_ids:
        with contextlib.suppress(Exception):
            await bot.delete_message(callback.from_user.id, mid)
    await state.update_data(product_message_ids=[])
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_kb_with_back)
    await state.set_state("waiting_for_catalog_category")
    await callback.answer()

@dp.callback_query(F.data == "checkout")
async def checkout(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    product_message_ids = data.get("product_message_ids", [])
    for mid in product_message_ids:
        with contextlib.suppress(Exception):
            await bot.delete_message(callback.from_user.id, mid)
    await send_disappearing_message(
        callback.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:",
        state,
        reply_markup=pickup_kb_with_back
    )
    await state.set_state(OrderFSM.choosing_delivery)

@dp.message(OrderFSM.choosing_delivery)
async def choose_delivery(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await send_disappearing_message(msg.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", state, reply_markup=main_menu)
        await state.clear()
        return
    if msg.text.startswith("–î–æ—Å—Ç–∞–≤–∫–∞"):
        await state.update_data(delivery="–î–æ—Å—Ç–∞–≤–∫–∞")
        await send_disappearing_message(msg.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏:", state, reply_markup=region_kb_with_back)
        await state.set_state(OrderFSM.choosing_region)
    elif msg.text.startswith("–°–∞–º–æ–≤—ã–≤–æ–∑"):
        await state.update_data(delivery="–°–∞–º–æ–≤—ã–≤–æ–∑", address="–°–∞–º–æ–≤—ã–≤–æ–∑", region="–≥. –¢–æ—Å–Ω–æ")
        await send_disappearing_message(msg.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-06-10, –≥–¥–µ –ì–ì–ì–ì-–ú–ú-–î–î):", state, reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
        await state.set_state(OrderFSM.choosing_date)
    else:
        await send_disappearing_message(msg.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–æ–ø–∫–æ–π.", state)

@dp.message(OrderFSM.choosing_region)
async def choose_region(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await send_disappearing_message(msg.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:", state, reply_markup=pickup_kb_with_back)
        await state.set_state(OrderFSM.choosing_delivery)
        return
    if msg.text not in DELIVERY_REGIONS:
        await send_disappearing_message(msg.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∫–Ω–æ–ø–∫–æ–π.", state)
        return
    await state.update_data(region=msg.text)
    await send_disappearing_message(msg.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", state, reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
    await state.set_state(OrderFSM.entering_address)

@dp.message(OrderFSM.entering_address)
async def enter_address(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await send_disappearing_message(msg.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏:", state, reply_markup=region_kb_with_back)
        await state.set_state(OrderFSM.choosing_region)
        return
    await state.update_data(address=msg.text)
    await send_disappearing_message(msg.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-06-10):", state, reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
    await state.set_state(OrderFSM.choosing_date)

@dp.message(OrderFSM.choosing_date)
async def choose_date(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        if data.get("delivery") == "–î–æ—Å—Ç–∞–≤–∫–∞":
            await send_disappearing_message(msg.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", state, reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
            await state.set_state(OrderFSM.entering_address)
        else:
            await send_disappearing_message(msg.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", state, reply_markup=main_menu)
            await state.clear()
        return
    try:
        datetime.datetime.strptime(msg.text, "%Y-%m-%d")
        await state.update_data(date=msg.text)
        await send_disappearing_message(msg.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30):", state, reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
        await state.set_state(OrderFSM.choosing_time)
    except ValueError:
        await send_disappearing_message(msg.from_user.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.", state)

@dp.message(OrderFSM.choosing_time)
async def choose_time(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await send_disappearing_message(msg.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-06-10):", state, reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
        await state.set_state(OrderFSM.choosing_date)
        return
    try:
        datetime.datetime.strptime(msg.text, "%H:%M")
        await state.update_data(time=msg.text)
        phone_kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await send_disappearing_message(msg.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79119523847):", state, reply_markup=phone_kb)
        await state.set_state(OrderFSM.entering_phone)
    except ValueError:
        await send_disappearing_message(msg.from_user.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.", state)

@dp.message(OrderFSM.entering_phone)
async def get_phone(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await send_disappearing_message(msg.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30):", state, reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
        await state.set_state(OrderFSM.choosing_time)
        return
    phone = None
    if msg.contact and msg.contact.phone_number:
        phone = msg.contact.phone_number
    elif msg.text and msg.text.startswith("+") and len(msg.text) >= 10:
        phone = msg.text
    if not phone:
        await send_disappearing_message(msg.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567.", state)
        return
    await state.update_data(phone=phone)
    await send_disappearing_message(msg.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", state, reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
    await state.set_state(OrderFSM.entering_name)

@dp.message(OrderFSM.entering_name)
async def get_name(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        phone_kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await send_disappearing_message(msg.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:", state, reply_markup=phone_kb)
        await state.set_state(OrderFSM.entering_phone)
        return
    await state.update_data(user_name=msg.text)
    card_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await send_disappearing_message(msg.from_user.id, "–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É –∫ –∑–∞–∫–∞–∑—É?", state, reply_markup=card_kb)
    await state.set_state(OrderFSM.asking_card)

@dp.message(OrderFSM.asking_card)
async def ask_card(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await send_disappearing_message(msg.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", state, reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
        await state.set_state(OrderFSM.entering_name)
        return
    if msg.text == "–î–∞":
        await send_disappearing_message(msg.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏:", state, reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
        await state.set_state(OrderFSM.entering_card_text)
    elif msg.text == "–ù–µ—Ç":
        await state.update_data(card_text=None)
        await send_disappearing_message(msg.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", state, reply_markup=payment_kb_with_back)
        await state.set_state(OrderFSM.choosing_payment)
    else:
        await send_disappearing_message(msg.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∫–Ω–æ–ø–∫–æ–π.", state)

@dp.message(OrderFSM.entering_card_text)
async def get_card_text(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        card_kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await send_disappearing_message(msg.from_user.id, "–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É –∫ –∑–∞–∫–∞–∑—É?", state, reply_markup=card_kb)
        await state.set_state(OrderFSM.asking_card)
        return
    await state.update_data(card_text=msg.text)
    await send_disappearing_message(msg.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", state, reply_markup=payment_kb_with_back)
    await state.set_state(OrderFSM.choosing_payment)

@dp.message(OrderFSM.choosing_payment)
async def choose_payment(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        card_kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")],
                [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await send_disappearing_message(msg.from_user.id, "–ñ–µ–ª–∞–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É –∫ –∑–∞–∫–∞–∑—É?", state, reply_markup=card_kb)
        await state.set_state(OrderFSM.asking_card)
        return
    if msg.text not in ["–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏", "–û–ø–ª–∞—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É"]:
        await send_disappearing_message(msg.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∫–Ω–æ–ø–∫–æ–π.", state)
        return
    await state.update_data(payment=msg.text)
    data = await state.get_data()
    user_id = msg.from_user.id
    cart = carts.get(user_id, [])
    total = sum(int(f["price"]) for f in cart)
    delivery_price = 0
    if data.get("delivery") == "–î–æ—Å—Ç–∞–≤–∫–∞":
        delivery_price = get_delivery_price(
            data.get("region"), data.get("address"), data.get("date"), data.get("time")
        )
        total += delivery_price

    cart_items = []
    for f in cart:
        cart_items.append(f"{f['emoji']} {f['name']} ‚Äî {f['price']} —Ä—É–±.")
    
    card_text_line = f"\n–û—Ç–∫—Ä—ã—Ç–∫–∞: {data.get('card_text', '')}" if data.get('card_text') else ""
    
    order_text = (
        f"–í–∞—à –∑–∞–∫–∞–∑:\n"
        f"{chr(10).join(cart_items)}"
        + (f"\n–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_price} —Ä—É–±." if delivery_price else "") +
        f"\n–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total} —Ä—É–±."
        f"\n–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '-')}"
        + card_text_line
        + "\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑?"
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]
        ]
    )
    await send_disappearing_message(user_id, order_text, state, reply_markup=kb)
    await state.update_data(total=total, delivery_price=delivery_price, cart=cart)
    await state.set_state(OrderFSM.waiting_for_order_confirm)

@dp.callback_query(F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    msg = callback.message
    user_id = callback.from_user.id
    username = callback.from_user.username
    
    cart_items = []
    for f in data['cart']:
        cart_items.append(f"{f['emoji']} {f['name']} ‚Äî {f['price']} —Ä—É–±.")
    
    card_text_line = f"\n–û—Ç–∫—Ä—ã—Ç–∫–∞: {data.get('card_text', '')}" if data.get('card_text') else ""
    
    order_text = (
        f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data.get('user_name', '-')}\n"
        f"–ù–∏–∫: @{username if username else '-'}\n"
        f"–¢–æ–≤–∞—Ä—ã:\n" +
        "\n".join(cart_items) +
        (f"\n–î–æ—Å—Ç–∞–≤–∫–∞: {data.get('delivery_price', 0)} —Ä—É–±." if data.get('delivery_price') else "") +
        f"\n–ò—Ç–æ–≥–æ: {data.get('total', 0)} —Ä—É–±."
        f"\n–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '-')}"
        + card_text_line +
        f"\n–†–µ–≥–∏–æ–Ω: {data.get('region', '-')}" +
        f"\n–°–ø–æ—Å–æ–±: {data.get('delivery', '-')}\n"
        f"–ê–¥—Ä–µ—Å: {data.get('address', '-')}\n"
        f"–î–∞—Ç–∞: {data.get('date', '-')}\n"
        f"–í—Ä–µ–º—è: {data.get('time', '-')}\n"
        f"–û–ø–ª–∞—Ç–∞: {data.get('payment', '-')}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMINS:
        await bot.send_message(admin_id, order_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await send_disappearing_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É! –°–ø–∞—Å–∏–±–æ!", state, reply_markup=main_menu)
    carts[user_id] = []
    await state.clear()

@dp.callback_query(F.data == "cancel_order")
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    await send_disappearing_message(callback.from_user.id, "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", state, reply_markup=main_menu)
    await state.clear()

# --- –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (–∞–¥–º–∏–Ω–∫–∞, —Ä–∞—Å—Å—ã–ª–∫–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) –æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –µ—Å—Ç—å ---

@dp.message(Command("add"))
async def add_flower(msg: Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
    await state.set_state(AddFlower.waiting_for_photo)

@dp.message(AddFlower.waiting_for_photo)
async def add_flower_photo(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
        await state.clear()
        return
    if not msg.photo:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return
    await state.update_data(photo=msg.photo[-1].file_id)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
    await state.set_state(AddFlower.waiting_for_name)

@dp.message(AddFlower.waiting_for_name)
async def add_flower_name(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
        await state.set_state(AddFlower.waiting_for_photo)
        return
    await state.update_data(name=msg.text)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:", reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
    await state.set_state(AddFlower.waiting_for_price)

@dp.message(AddFlower.waiting_for_price)
async def add_flower_price(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
        await state.set_state(AddFlower.waiting_for_name)
        return
    await state.update_data(price=msg.text)
    await msg.answer("–î–æ–±–∞–≤—å—Ç–µ —Å–º–∞–π–ª–∏–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
    await state.set_state(AddFlower.waiting_for_emoji)

@dp.message(AddFlower.waiting_for_emoji)
async def add_flower_emoji(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:", reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
        await state.set_state(AddFlower.waiting_for_price)
        return
    await state.update_data(emoji=msg.text)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_kb_with_back)
    await state.set_state(AddFlower.waiting_for_category)

@dp.message(AddFlower.waiting_for_category)
async def add_flower_category(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await msg.answer("–î–æ–±–∞–≤—å—Ç–µ —Å–º–∞–π–ª–∏–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
        await state.set_state(AddFlower.waiting_for_emoji)
        return
    if msg.text not in CATEGORIES:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–Ω–æ–ø–∫–æ–π.")
        return
    data = await state.get_data()
    flowers.append({
        'photo': data['photo'],
        'name': data['name'],
        'price': data['price'],
        'emoji': data['emoji'],
        'category': msg.text
    })
    save_flowers()
    await msg.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥!", reply_markup=main_menu)
    await state.clear()

@dp.message(Command("edit"))
async def edit_catalog(msg: Message):
    if not is_admin(msg.from_user.id):
        await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    if not flowers:
        await msg.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{f['emoji']} {f['name']}", callback_data=f"edit_{i}")]
            for i, f in enumerate(flowers)
        ]
    )
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

@dp.callback_query(F.data.startswith("edit_"))
async def choose_edit(callback: CallbackQuery, state: FSMContext):
    idx = int(callback.data.split("_")[1])
    await state.update_data(idx=idx)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data="edit_delete")],
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_change")]
        ]
    )
    flower = flowers[idx]
    await callback.message.answer(
        f"–¢–æ–≤–∞—Ä: {flower['emoji']} {flower['name']} ‚Äî {flower['price']} —Ä—É–±.\n–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=kb
    )
    await state.set_state(EditFlowerFSM.waiting_for_action)

@dp.callback_query(F.data == "edit_delete")
async def delete_flower(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    idx = data["idx"]
    flower = flowers.pop(idx)
    save_flowers()
    await callback.message.answer(f"–¢–æ–≤–∞—Ä {flower['name']} —É–¥–∞–ª—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    await state.clear()

@dp.callback_query(F.data == "edit_change")
async def change_flower(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):", reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
    await state.set_state(EditFlowerFSM.waiting_for_new_name)

@dp.message(EditFlowerFSM.waiting_for_new_name)
async def edit_name(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
        await state.clear()
        return
    await state.update_data(new_name=msg.text)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (–∏–ª–∏ '-' —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):", reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
    await state.set_state(EditFlowerFSM.waiting_for_new_price)

@dp.message(EditFlowerFSM.waiting_for_new_price)
async def edit_price(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):", reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
        await state.set_state(EditFlowerFSM.waiting_for_new_name)
        return
    await state.update_data(new_price=msg.text)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–º–∞–π–ª–∏–∫ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):", reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
    await state.set_state(EditFlowerFSM.waiting_for_new_emoji)

@dp.message(EditFlowerFSM.waiting_for_new_emoji)
async def edit_emoji(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (–∏–ª–∏ '-' —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):", reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
        await state.set_state(EditFlowerFSM.waiting_for_new_price)
        return
    await state.update_data(new_emoji=msg.text)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–∏–ª–∏ '-' —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):", reply_markup=category_kb_with_back)
    await state.set_state(EditFlowerFSM.waiting_for_new_category)

@dp.message(EditFlowerFSM.waiting_for_new_category)
async def edit_category(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–º–∞–π–ª–∏–∫ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å):", reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
        await state.set_state(EditFlowerFSM.waiting_for_new_emoji)
        return
    data = await state.get_data()
    idx = data["idx"]
    if data["new_name"] != "-":
        flowers[idx]["name"] = data["new_name"]
    if data["new_price"] != "-":
        flowers[idx]["price"] = data["new_price"]
    if data["new_emoji"] != "-":
        flowers[idx]["emoji"] = data["new_emoji"]
    if msg.text in CATEGORIES:
        flowers[idx]["category"] = msg.text
    save_flowers()
    await msg.answer("–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=ReplyKeyboardRemove())
    await state.clear()

@dp.message(Command("broadcast"))
async def start_broadcast(msg: Message, state: FSMContext):
    if not is_admin(msg.from_user.id):
        await msg.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=with_back_kb(ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)))
    await state.set_state(BroadcastFSM.waiting_for_text)

@dp.message(StateFilter(BroadcastFSM.waiting_for_text))
async def do_broadcast(msg: Message, state: FSMContext):
    if msg.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
        await state.clear()
        return
    text = msg.text
    count = 0
    for uid in users:
        try:
            await bot.send_message(uid, text)
            count += 1
        except Exception:
            pass
    await msg.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
